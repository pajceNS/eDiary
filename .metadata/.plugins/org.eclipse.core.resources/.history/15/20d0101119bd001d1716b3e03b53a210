package com.eDiary.controllers;

import java.security.Principal;
import java.util.List;
import java.util.stream.Collectors;

import javax.mail.MessagingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.eDiary.entities.GradeEntity;
import com.eDiary.entities.dto.GradeDto;
import com.eDiary.entities.util.RESTError;
import com.eDiary.repositories.AdminRepository;
import com.eDiary.repositories.GradeRepository;
import com.eDiary.repositories.StudentRepository;
import com.eDiary.repositories.StudentTeacherSubjectRepository;
import com.eDiary.repositories.TeacherSubjectRepository;
import com.eDiary.services.GradeService;
import com.eDiary.services.StudentTeacherSubjectService;
import com.eDiary.services.TeacherSubjectService;

@RestController
@RequestMapping(value = "/api/v1/grades")
public class GradeController {

	@Autowired
	private GradeRepository gradeRepository;

	@Autowired
	private GradeService gradeService;

	@Autowired
	private StudentRepository studentRepository;

	@Autowired
	private StudentTeacherSubjectRepository studentTeacherSubjectRepository;

	@Autowired
	private StudentTeacherSubjectService studentTeacherSubjectService;

	@Autowired
	private TeacherSubjectRepository teacherSubjectRepository;

	@Autowired
	private TeacherSubjectService teacherSubjectService;

	@Autowired
	private AdminRepository adminRepository;
	
	private String createErrorMessage(BindingResult result) {
		return result.getAllErrors().stream().map(ObjectError::getDefaultMessage).collect(Collectors.joining(" "));
	}

	// get all
	@RequestMapping(method = RequestMethod.GET)
	public ResponseEntity<?> getAll() {
		return new ResponseEntity<List<GradeEntity>>((List<GradeEntity>) gradeRepository.findAll(), HttpStatus.OK);
	}

	// get by id
	@RequestMapping(method = RequestMethod.GET, value = "/{id}")
	public ResponseEntity<?> getById(@PathVariable Integer id) {
		if (gradeRepository.existsById(id)) {
			return new ResponseEntity<GradeEntity>(gradeRepository.findById(id).get(), HttpStatus.OK);
		}
		return new ResponseEntity<RESTError>(new RESTError(1, "Grade not found."), HttpStatus.NOT_FOUND);
	}

	// add new grade
	@RequestMapping(method = RequestMethod.POST, value = "/{studentTeacherSubject}")
	public ResponseEntity<?> addGrade(@PathVariable Integer studentTeacherCourse,
			@Valid @RequestBody GradeDto newGrade, BindingResult result, HttpServletRequest request)
			throws MessagingException {
		if (studentTeacherSubjectRepository.existsById(studentTeacherCourse)
				&& studentTeacherSubjectService.isActive(studentTeacherCourse)) {
			Principal principal = request.getUserPrincipal();
			if (!principal.getName().equals(studentTeacherSubjectRepository.findById(studentTeacherCourse).get()
					.getTeacherSubject().getTeacher().getUsername())
					&& !adminRepository.existsByUsername(principal.getName())) {
				throw new AuthorizationServiceException("Forbidden");
			}
			if (!result.hasErrors()) {
				return gradeService.gradeStudent(newGrade, studentTeacherCourse);
			}
			return new ResponseEntity<>(createErrorMessage(result), HttpStatus.BAD_REQUEST);
		}
		return new ResponseEntity<RESTError>(new RESTError(12, "Student teacher course combination not found."),
				HttpStatus.NOT_FOUND);
	}

	// delete grade
	@RequestMapping(method = RequestMethod.DELETE, value = "/{id}")
	public ResponseEntity<?> deleteGrade() {
		return null;
	}

	// get all grades for student and teacherSubject
	public ResponseEntity<?> getGradesForStudent() {
		return null;
	}
}
