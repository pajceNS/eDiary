package com.eDiary.controllers;

import java.util.List;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.eDiary.entities.ClassEntity;
import com.eDiary.entities.ParentEntity;
import com.eDiary.entities.util.RESTError;
import com.eDiary.repositories.AdminRepository;
import com.eDiary.repositories.ParentRepository;
import com.eDiary.repositories.RoleRepository;
import com.eDiary.repositories.StudentRepository;
import com.eDiary.services.ParentService;
import com.eDiary.validation.ParentValidator;

@RestController
@RequestMapping(value = "/api/v1/parents")
public class ParentController {

	private final Logger logger = (Logger) LoggerFactory.getLogger(this.getClass());

	@Autowired
	private ParentRepository parentRepository;

	@Autowired
	private ParentService parentService;

	@Autowired
	private ParentValidator parentValidator;

	@Autowired
	private StudentRepository studentRepository;

	@Autowired
	private RoleRepository roleRepository;

	@Autowired
	private AdminRepository adminRepository;

	@InitBinder
	protected void initBinder(final WebDataBinder binder) {
		binder.addValidators(parentValidator);
	}

	// get all
	@RequestMapping(method = RequestMethod.GET)
	public ResponseEntity<?> getAll() {
		try {
			return new ResponseEntity<>((List<ParentEntity>) parentRepository.findAll(), HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<RESTError>(new RESTError(1, "Internal server error."),
					HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	// get by id
	@RequestMapping(method = RequestMethod.GET, value = "/{id}")
	public ResponseEntity<?> getById(@PathVariable Integer id) {
		if (parentRepository.existsById(id) && parentService.isActive(id)) {
			return new ResponseEntity<ParentEntity>(parentRepository.findById(id).get(), HttpStatus.OK);
		}
		return new ResponseEntity<RESTError>(new RESTError(1, "Parent Not found."), HttpStatus.NOT_FOUND);
	}

	// add new parent
	@RequestMapping(method = RequestMethod.POST)
	public ResponseEntity<?> addParent() {
		return null;
	}

	// update parent
	@RequestMapping(method = RequestMethod.PUT, value = "/{parentId}")
	public ResponseEntity<?> updateParent() {
		return null;
	}

	// delete parent
	@RequestMapping(method = RequestMethod.DELETE, value = "/{parentId}")
	public ResponseEntity<?> deleteParent() {
		return null;
	}

	// get all students for parent
	@RequestMapping(method = RequestMethod.GET, value = "/{parentId}/children/")
	public ResponseEntity<?> getAllChildren() {
		return null;
	}
}
