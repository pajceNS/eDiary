package com.eDiary.controllers;

import java.util.List;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.eDiary.entities.SubjectEntity;
import com.eDiary.entities.util.RESTError;
import com.eDiary.repositories.SubjectRepository;
import com.eDiary.repositories.TeacherSubjectRepository;
import com.eDiary.services.SubjectService;
import com.eDiary.validation.SubjectValidator;

@RestController
@RequestMapping(value = "/api/v1/subjects")
public class SubjectController {

	private final Logger loger = (Logger) LoggerFactory.getLogger(this.getClass());

	@Autowired
	private SubjectRepository subjectRepository;

	@Autowired
	private SubjectService subjectService;

	@Autowired
	private SubjectValidator subjectValidator;

	@InitBinder
	protected void initBinder(final WebDataBinder binder) {
		binder.addValidators(subjectValidator);
	}

	// get all
	@RequestMapping(method = RequestMethod.GET)
	public ResponseEntity<?> getAll() {
		return new ResponseEntity<List<SubjectEntity>>(
				((List<SubjectEntity>) subjectRepository.findAll()).stream()
						.filter(subject -> !subject.getDeleted().equals(true)).collect(Collectors.toList()),
				HttpStatus.OK);
	}

	// get by id
	@RequestMapping(method = RequestMethod.GET, value = "/{id}")
	public ResponseEntity<?> getById(@PathVariable Integer id) {
		if (subjectRepository.existsById(id) && subjectService.isActive(id)) {
			return new ResponseEntity<SubjectEntity>(subjectRepository.findById(id).get(), HttpStatus.OK);
		}
		return new ResponseEntity<RESTError>(new RESTError(1, "Subject not found."), HttpStatus.NOT_FOUND);
	}

	// add new subject
	@RequestMapping(method = RequestMethod.POST)
	public ResponseEntity<?> addSubject() {
		return null;
	}

	// update subject
	@RequestMapping(method = RequestMethod.PUT, value = "/{subjectId}")
	public ResponseEntity<?> updateSubject() {
		return null;
	}

	// delete subject
	@RequestMapping(method = RequestMethod.DELETE, value = "/{id}")
	public ResponseEntity<?> deleteSubjectById() {
		return null;
	}

	// get all teachers for subject
	@RequestMapping(method = RequestMethod.GET, value = "/{subjectId}/teachers/")
	public ResponseEntity<?> getAllTeachers() {
		return null;
	}

//	Vrati sve profesor-predmet kombinacije
//	@Secured("ROLE_ADMIN")
//	@GetMapping(value ="/teacher-course/")
//	public ResponseEntity<?> getAllTeacherCourseCombinations() {
//		List<TeacherCourseEntity> teacherCourses = ((List<TeacherCourseEntity>) teacherCourseRepository.findAll())
//				.stream()
//					.filter(teacherCourse -> (!teacherCourse.getDeleted().equals(true) 
//							&& !teacherCourse.getCourse().getDeleted().equals(true)
//							&& !teacherCourse.getTeacher().getDeleted().equals(true)))
//					.collect(Collectors.toList());
//		
//		return new ResponseEntity<List<TeacherCourseEntity>>(teacherCourses, HttpStatus.OK);
}
