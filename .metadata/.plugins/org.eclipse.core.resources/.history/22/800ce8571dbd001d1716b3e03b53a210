package com.eDiary.controllers;

import java.util.List;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.eDiary.entities.ParentEntity;
import com.eDiary.entities.dto.ParentDto;
import com.eDiary.entities.util.RESTError;
import com.eDiary.repositories.ParentRepository;
import com.eDiary.repositories.RoleRepository;
import com.eDiary.services.ParentService;
import com.eDiary.validation.ParentValidator;

@RestController
@RequestMapping(value = "/api/v1/parents")
public class ParentController {

	//private final Logger logger = (Logger) LoggerFactory.getLogger(this.getClass());

	@Autowired
	private ParentRepository parentRepository;

	@Autowired
	private ParentService parentService;

	@Autowired
	private ParentValidator parentValidator;

	@Autowired
	private RoleRepository roleRepository;


	@InitBinder
	protected void initBinder(final WebDataBinder binder) {
		binder.addValidators(parentValidator);
	}

	// get all
	@RequestMapping(method = RequestMethod.GET)
	public ResponseEntity<?> getAll() {
		try {
			return new ResponseEntity<>((List<ParentEntity>) parentRepository.findAll(), HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<RESTError>(new RESTError(2, "Internal server error."),
					HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	// get by id
	@RequestMapping(method = RequestMethod.GET, value = "/{id}")
	public ResponseEntity<?> getById(@PathVariable Integer id) {
		if (parentRepository.existsById(id) && parentService.isActive(id)) {
			return new ResponseEntity<ParentEntity>(parentRepository.findById(id).get(), HttpStatus.OK);
		}
		return new ResponseEntity<RESTError>(new RESTError(1, "Parent Not found."), HttpStatus.NOT_FOUND);
	}

	public String createErrorMessage(BindingResult result) {
		String errors = "";
		for (ObjectError error : result.getAllErrors()) {
			errors += error.getDefaultMessage();
			errors += "\n";
		}
		return errors;
	}

	// add new parent
	@RequestMapping(method = RequestMethod.POST)
	public ResponseEntity<?> createNew(@Valid @RequestBody ParentDto newParent, BindingResult result) {
		if (result.hasErrors()) {
			return new ResponseEntity<>(createErrorMessage(result), HttpStatus.BAD_REQUEST);
		} else {
			parentValidator.validate(newParent, result);
		}
		ParentEntity parent = new ParentEntity();
		parent.setDeleted(false);
		parent.setFirstName(newParent.getFirstName());
		parent.setLastName(newParent.getLastName());
		parent.setUsername(newParent.getUsername());
		parent.setPassword(newParent.getPassword());
		parent.setEmail(newParent.getEmail());
		parent.setRole(roleRepository.findById(4).get());
		parentRepository.save(parent);
		// logger.info("Added parent: " + newParent.toString());
		return new ResponseEntity<ParentEntity>(parent, HttpStatus.OK);
	}

	// update parent
	@RequestMapping(method = RequestMethod.PUT, value = "/{parentId}")
	public ResponseEntity<?> updateParent(@PathVariable Integer parentId, @Valid @RequestBody ParentDto newParent,
			BindingResult result) {
		if (parentRepository.existsById(parentId) && parentService.isActive(parentId)) {
			if (result.hasErrors()) {
				return new ResponseEntity<>(createErrorMessage(result), HttpStatus.BAD_REQUEST);
			}
			ParentEntity parent = parentRepository.findById(parentId).get();
			parent.setFirstName(newParent.getFirstName());
			parent.setLastName(newParent.getLastName());
			parent.setUsername(newParent.getUsername());
			parent.setPassword((newParent.getPassword()));
			parent.setEmail(newParent.getEmail());
			parent.setChildren(newParent.getChildren());
			parentRepository.save(parent);
			return new ResponseEntity<ParentEntity>(parent, HttpStatus.OK);
		}
		return new ResponseEntity<RESTError>(new RESTError(1, "Parent not found."), HttpStatus.NOT_FOUND);
	}

	// delete parent
	@RequestMapping(method = RequestMethod.DELETE, value = "/{parentId}")
	public ResponseEntity<?> deleteParent(@PathVariable Integer parentId) {
		if (parentRepository.existsById(parentId) && parentService.isActive(parentId)) {
			ParentEntity parent = parentRepository.findById(parentId).get();
			parent.setDeleted(true);
			parentRepository.save(parent);
			//logger.info("Deleted parent with ID: " + parentId.toString());
			return new ResponseEntity<ParentEntity>(parent, HttpStatus.OK);
		}
		return new ResponseEntity<RESTError>(new RESTError(4, "Parent not found."), HttpStatus.NOT_FOUND);
	}

	// get all students for parent
	@RequestMapping(method = RequestMethod.GET, value = "/{parentId}/children/")
	public ResponseEntity<?> getAllChildren() {
		return null;
	}
}
