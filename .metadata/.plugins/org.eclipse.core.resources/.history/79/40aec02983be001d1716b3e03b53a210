package com.eDiary.controllers;

import java.util.List;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.eDiary.entities.TeacherEntity;
import com.eDiary.entities.dto.TeacherDto;
import com.eDiary.entities.util.RESTError;
import com.eDiary.repositories.AdminRepository;
import com.eDiary.repositories.RoleRepository;
import com.eDiary.repositories.SubjectRepository;
import com.eDiary.repositories.TeacherRepository;
import com.eDiary.repositories.TeacherSubjectRepository;
import com.eDiary.services.SubjectService;
import com.eDiary.services.TeacherService;
import com.eDiary.validation.TeacherValidator;

@RestController
@RequestMapping(value = "/api/v1/teachers")
public class TeacherController {

	// private final Logger logger = (Logger)
	// LoggerFactory.getLogger(this.getClass());

	@Autowired
	private TeacherRepository teacherRepository;

	@Autowired
	private TeacherService teacherService;

	@Autowired
	private TeacherValidator teacherValidator;

	@Autowired
	private RoleRepository roleRepository;

	@InitBinder
	protected void initBinder(final WebDataBinder binder) {
		binder.addValidators(teacherValidator);
	}

	// get all
	@RequestMapping(method = RequestMethod.GET)
	public ResponseEntity<?> getAll() {
		return new ResponseEntity<List<TeacherEntity>>(
				((List<TeacherEntity>) teacherRepository.findAll()).stream()
						.filter(teacher -> !teacher.getDeleted().equals(true)).collect(Collectors.toList()),
				HttpStatus.OK);
	}

	// get by id
	@RequestMapping(method = RequestMethod.GET, value = "/{id}")
	public ResponseEntity<?> getById(@PathVariable Integer id, HttpServletRequest request) {
		TeacherEntity teacher = teacherRepository.findById(id).get();
		if (teacherRepository.existsById(id) && teacherService.isActive(id)) {
			return new ResponseEntity<TeacherEntity>(teacher, HttpStatus.OK);
		}
		return new ResponseEntity<RESTError>(new RESTError(6, "Teacher not found."), HttpStatus.NOT_FOUND);
	}

	// add new teacher
	@RequestMapping(method = RequestMethod.POST)
	public ResponseEntity<?> addNewTeacher(@Valid @RequestBody TeacherDto newTeacher, BindingResult result) {
		if (result.hasErrors()) {
			return new ResponseEntity<>(createErrorMessage(result), HttpStatus.BAD_REQUEST);
		} else {
			teacherValidator.validate(newTeacher, result);
		}
		TeacherEntity teacher = new TeacherEntity();
		teacher.setDeleted(false);
		teacher.setFirstName(newTeacher.getFirstName());
		teacher.setLastName(newTeacher.getLastName());
		teacher.setUsername(newTeacher.getUsername());
		teacher.setPassword(newTeacher.getPassword());
		teacher.setRole(roleRepository.findById(2).get());
		teacherRepository.save(teacher);
		// logger.info("Added teacher: " + newTeacher.toString());
		return new ResponseEntity<TeacherEntity>(teacher, HttpStatus.OK);
	}

	// update teacher
	@RequestMapping(method = RequestMethod.PUT, value = "/{teacherId}")
	public ResponseEntity<?> updateTeacher() {
		return null;
	}

	// delete teacher
	@RequestMapping(method = RequestMethod.DELETE, value = "/{teacherId}")
	public ResponseEntity<?> deleteTeacher() {
		return null;
	}

	// add subject for teacher
	@RequestMapping(method = RequestMethod.POST, value = "/{teacherId}/subjects/{subjectId}")
	public ResponseEntity<?> addSubjectForTeacher() {
		return null;
	}

	// delete subject for teacher
	@RequestMapping(method = RequestMethod.DELETE, value = "/{teacherId}/subjects/{subjectId}")
	public ResponseEntity<?> deleteSubjectForTeacher() {
		return null;
	}

	// get all subjects for teacher
	@RequestMapping(method = RequestMethod.GET, value = "/{teacherId}/subjects/")
	public ResponseEntity<?> getSubjectsForTeacher() {
		return null;
	}

	public String createErrorMessage(BindingResult result) {
		String errors = "";
		for (ObjectError error : result.getAllErrors()) {
			errors += error.getDefaultMessage();
			errors += "\n";
		}
		return errors;
	}
}
