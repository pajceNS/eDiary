package com.eDiary.services;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.eDiary.entities.ClassEntity;
import com.eDiary.entities.StudentEntity;
import com.eDiary.entities.StudentTeacherSubjectEntity;
import com.eDiary.entities.SubjectEntity;
import com.eDiary.entities.TeacherEntity;
import com.eDiary.entities.TeacherSubjectEntity;
import com.eDiary.repositories.ClassRepository;
import com.eDiary.repositories.StudentRepository;
import com.eDiary.repositories.StudentTeacherSubjectRepository;
import com.eDiary.repositories.SubjectRepository;
import com.eDiary.repositories.TeacherRepository;
import com.eDiary.repositories.TeacherSubjectRepository;

@Service
public class ClassServiceImpl implements ClassService {

	@Autowired
	private ClassRepository classRepository;

	@Autowired
	private StudentRepository studentRepository;

	@Autowired
	private SubjectRepository subjectRepository;

	@Autowired
	private TeacherRepository teacherRepository;

	@Autowired
	private TeacherSubjectRepository teacherSubjectRepository;

	@Autowired
	private StudentTeacherSubjectRepository studentTeacherSubjectRepository;

	@Override
	public List<StudentEntity> addCoursesForEntireClass(Integer classId, Integer subjectId, Integer teacherId) {
		ClassEntity classEntity = classRepository.findById(classId).get();
		SubjectEntity subject = subjectRepository.findById(subjectId).get();
		TeacherEntity teacher = teacherRepository.findById(teacherId).get();
		TeacherSubjectEntity teacherSubject = teacherSubjectRepository.findByTeacherAndSubject(teacher, subject);

		List<StudentEntity> studentsOfClass = studentRepository.findByAttendingClass(classEntity).stream()
				.filter(student -> !student.getDeleted().equals(true)).collect(Collectors.toList());
		List<StudentEntity> modifiedStudents = new ArrayList<>();

		for (StudentEntity studentEntity : studentsOfClass) {
			if (!studentTeacherSubjectRepository.existsByStudentAndTeacherSubject(studentEntity, teacherSubject)) {
				StudentTeacherSubjectEntity stce = new StudentTeacherSubjectEntity();
				stce.setStudent(studentEntity);
				stce.setTeacherSubject(teacherSubject);
				studentTeacherSubjectRepository.save(stce);
				modifiedStudents.add(studentEntity);
			}
		}

		return modifiedStudents;

	}

	@Override
	public Boolean isActive(Integer id) {
		if (classRepository.existsById(id)) {
			ClassEntity clazz = classRepository.findById(id).get();
			if (clazz.getDeleted().equals(true)) {
				return false;
			}
			return true;
		}
		return false;
	}

}
